{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "cd7b177a",
   "metadata": {},
   "outputs": [],
   "source": [
    "#2937\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 35,
   "id": "46cfd833",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "введите число 179\n",
      "The next number for the number 179 is 180\n"
     ]
    }
   ],
   "source": [
    "number = int(input(\"введите число \"))\n",
    "\n",
    "print ( \"The next number for the number \" + str(number) + \" is \" + str(number +  1))\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 34,
   "id": "621ee7c5",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "введите число 179\n",
      "The previous number for the number 179 is 178\n"
     ]
    }
   ],
   "source": [
    "number = int(input(\"введите число \"))\n",
    "\n",
    "print ( \"The previous number for the number \" + str(number) + \" is \" + str(number -  1))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 37,
   "id": "5c705908",
   "metadata": {},
   "outputs": [],
   "source": [
    "#3338\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "76980dd5",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[9, 8, 7, 6, 5, 4, 3, 2, 1]"
      ]
     },
     "execution_count": 3,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "number = [1,2,3,4,5,6,7,8,9]\n",
    "number[::-1]\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "8205b94f",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "766247770432944429179173513575154591809369561091801088\n"
     ]
    }
   ],
   "source": [
    "# Вычислите 2179. Выведите на экран вычисленное значение.\n",
    "\n",
    "print(2**179)\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "id": "dbd823ca",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "гипотенуза равняется: 987.361129475938\n"
     ]
    }
   ],
   "source": [
    "# Вычислите длину гипотенузы в прямоугольном треугольнике со сторонами 179 и 971\n",
    "\n",
    "# c**2 = a**2 + b**2\n",
    "\n",
    "print(\"гипотенуза равняется: \" + str(((179**2 + 971**2)**0.5)))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "53dfe6b9",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Введите число 654\n",
      "Введите число 687\n",
      "948.5172639441\n"
     ]
    }
   ],
   "source": [
    "# Дано два числа a и b. Выведите гипотенузу треугольника с заданными катетами.\n",
    "\n",
    "# Входные данные\n",
    "# Вводятся два целых положительных числа, не превышающих 1000.\n",
    "\n",
    "# Выходные данные\n",
    "# Выведите ответ на задачу с точностью 10 знаков после запятой\n",
    "\n",
    "numa = int(input(\"Введите число \"))\n",
    "numb = int(input(\"Введите число \"))\n",
    "if numa <= 1000 and numb <= 1000:\n",
    "    \n",
    "    print(str('%.10f' % ((numa)**2 + (numb)**2)**0.5))\n",
    "elif numa >= 1000 and numb >= 1000:\n",
    "    print(\"надо меньше 1000!!\")\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "866cf4cb",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Напишите программу, которая приветствует пользователя, выводя слово Hello, \n",
    "# введенное имя и знаки препинания по образцу (см. пример входных и выходных данных).\n",
    "# Программа должна считывать в строковую переменную значение и писать соответствующее приветствие.\n",
    "# Обратите внимание, что после запятой должен обязательно стоять пробел, а перед восклицательным знаком пробела нет.\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "id": "c7304fa9",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "введите имя Harry\n",
      "Hello, Harry!\n"
     ]
    }
   ],
   "source": [
    "name = str(input('введите имя '))\n",
    "print(\"Hello, \" + (name) + \"!\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "id": "24a964bd",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "введите число 100\n",
      "введите число 100\n",
      "0\n"
     ]
    }
   ],
   "source": [
    "# Даны два целых числа. Программа должна вывести число 1, если первое число больше второго, число 2, если второе \n",
    "# больше первого или число 0, если они равны.\n",
    "\n",
    "num1 = int(input(\"введите число \"))\n",
    "num2 = int(input(\"введите число \"))\n",
    "\n",
    "if num1 > num2:\n",
    "    print (\"1\")\n",
    "elif num1 < num2:\n",
    "    print(\"2\")\n",
    "else :\n",
    "    print (\"0\")\n",
    "    "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "279e0709",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "введите число 0\n",
      "sign(x) = 0\n"
     ]
    }
   ],
   "source": [
    "# В математике функция sign(x) (знак числа) определена так:\n",
    "# sign(x) = 1,   если x > 0,\n",
    "# sign(x) = -1, если x < 0,\n",
    "# sign(x) = 0,   если x = 0.\n",
    "\n",
    "# Для данного числа x выведите значение sign(x).\n",
    "\n",
    "x = int(input(\"введите число \"))\n",
    "if x > 0:\n",
    "    print(\"sign(x) = 1\")\n",
    "elif x < 0:\n",
    "    print(\"sign(x) = -1\")\n",
    "else:\n",
    "    print(\"sign(x) = 0\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "id": "9c9adca7",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "r\n",
      "r\n",
      "Abrak\n",
      "Abrakadab\n",
      "Arkdba\n",
      "baaar\n",
      "arbadakarbA\n",
      "abdkrA\n",
      "11\n"
     ]
    }
   ],
   "source": [
    "# Сначала выведите третий символ этой строки.\n",
    "\n",
    "# Во второй строке выведите предпоследний символ этой строки.\n",
    "\n",
    "# В третьей строке выведите первые пять символов этой строки.\n",
    "\n",
    "# В четвертой строке выведите всю строку, кроме последних двух символов.\n",
    "\n",
    "# В пятой строке выведите все символы с четными индексами (считая, что индексация начинается с 0, поэтому символы выводятся начиная с первого).\n",
    "\n",
    "# В шестой строке выведите все символы с нечетными индексами, то есть начиная со второго символа строки.\n",
    "\n",
    "# В седьмой строке выведите все символы в обратном порядке.\n",
    "\n",
    "# В восьмой строке выведите все символы строки через один в обратном порядке, начиная с последнего.\n",
    "\n",
    "# В девятой строке выведите длину данной строки.\n",
    "\n",
    "\n",
    "\n",
    "string = \"Abrakadabra\"\n",
    "print(string[2])\n",
    "print(string[-2])\n",
    "print(string[0:5])\n",
    "print(string[0:-2])\n",
    "print(string[::2])\n",
    "print(string[1:-1:2])\n",
    "print(string[::-1])\n",
    "print(string[::-2])\n",
    "print(len(string))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 37,
   "id": "6596e785",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "1"
      ]
     },
     "execution_count": 37,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Дана строка, состоящая из слов, разделенных ровно одним пробелом. Определите, \n",
    "# сколько в ней слов. Используйте для решения задачи метод count.\n",
    "\n",
    "string = \"Hello world\"\n",
    "\n",
    "string.count(\"Hello \")\n",
    " не знаю\n",
    "    "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "5567aa76",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "введите код от 33 до 126 99\n",
      "c\n"
     ]
    }
   ],
   "source": [
    "# Программа получает на вход один символ с кодом от 33 до 126.\n",
    "\n",
    "x = int(input(\"введите код от 33 до 126 \"))\n",
    "if x >= 33 and x <= 126:\n",
    "    print(chr(x))\n",
    "else:\n",
    "    print(\"НАДО от 33 до 126\")\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "2ead2718",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "01be164c",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "ed3b0854",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.13"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
